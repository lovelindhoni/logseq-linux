# This is the main desktop application release workflow for both nightly and beta/stable releases.

name: Build-Desktop-Release

on:
  workflow_dispatch:
    inputs:
      build-target:
        description: 'Build Target (Release Type)'
        type: choice
        required: true
        options:
          - beta
          - nightly
          - non-release
        default: "non-release"
      git-ref:
        description: "Release Git Ref (Which branch or tag to build?)"
        required: true
        default: "master"
      is-draft:
        description: 'Draft Release? (Beta only, Nightly will always be a non-draft)'
        type: boolean
        required: true
        default: true
      is-pre-release:
        description: 'Pre Release? (labeled as "PreRelease")'
        type: boolean
        required: true
        default: true
      enable-file-sync-production:
        description: 'File sync production mode'
        type: boolean
        required: true
        default: true
      enable-plugins:
        description: 'Build with plugin system support'
        type: boolean
        required: true
        default: true
env:
  CLOJURE_VERSION: '1.11.1.1413'
  NODE_VERSION: '18'
  JAVA_VERSION: '11'

jobs:
  compile-cljs:
    runs-on: ubuntu-20.04
    steps:
      - name: Check build options
        if: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.build-target == 'nightly' || github.event.inputs.build-target == 'beta') && github.event.inputs.git-ref != 'master' }}
        run: |
          echo "::error title=CheckFail::Nightly and Beta Release MUST be built from master"
          exit 1

      - name: Check out Git repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.git-ref }}

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache yarn cache directory
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Setup Java JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Cache clojure deps
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
          key: ${{ runner.os }}-clojure-lib-${{ hashFiles('**/deps.edn') }}

      - name: Setup clojure
        uses: DeLaGuardo/setup-clojure@10.1
        with:
          cli: ${{ env.CLOJURE_VERSION }}

      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(node ./scripts/get-pkg-version.js "${{ github.event.inputs.build-target }}")
          echo "version=$pkgver" >> $GITHUB_OUTPUT

      - name: Do Not Overwrite Existing Release
        if: ${{ github.event.inputs.build-target == 'beta' }}
        run: |
          if curl -f "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.ref.outputs.version }}" &>/dev/null; then
            echo "::error title=CheckFail::Release already exists"
            exit 1
          fi

      - name: Update Nightly APP Version
        if: ${{ github.event.inputs.build-target == 'nightly' }}
        run: |
          sed -i 's/defonce version ".*"/defonce version "${{ steps.ref.outputs.version }}"/g' src/main/frontend/version.cljs

      - name: Set Build Environment Variables (only when workflow_dispatch)
        run: |
          echo "ENABLE_PLUGINS=${{ github.event.inputs.enable-plugins == 'true' }}" >> $GITHUB_ENV
          echo "ENABLE_FILE_SYNC_PRODUCTION=${{ github.event.inputs.enable-file-sync-production == 'true' }}" >> $GITHUB_ENV

      - name: Compile CLJS
        run: yarn install && gulp build && yarn cljs:release-electron
        env:
          LOGSEQ_SENTRY_DSN: ${{ secrets.LOGSEQ_SENTRY_DSN }}
          LOGSEQ_POSTHOG_TOKEN: ${{ secrets.LOGSEQ_POSTHOG_TOKEN }}

      - name: Update APP Version
        run: |
          sed -i 's/"version": "0.0.1"/"version": "${{ steps.ref.outputs.version }}"/g' ./package.json
        working-directory: ./static

      - name: Display Package.json
        run: cat ./package.json
        working-directory: ./static

      - name: Save VERSION file
        run: echo "${{ steps.ref.outputs.version }}" > ./VERSION
        working-directory: ./static

      - name: List Files
        run: ls -al
        working-directory: ./static

      - name: Upload Sentry Sourcemaps (beta only)
        if: ${{ github.repository == 'logseq/logseq' && github.event_name == 'workflow_dispatch' && github.event.inputs.build-target == 'beta' }}
        run: |
          curl -sL https://sentry.io/get-cli/ | bash
          release_name="logseq@${{ steps.ref.outputs.version }}"
          sentry-cli releases new "${release_name}"
          sentry-cli releases files "${release_name}" upload-sourcemaps --ext map --ext js ./static/js --url-prefix '~/static/js'
          sentry-cli releases finalize "${release_name}"
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: logseq
          SENTRY_PROJECT: logseq

      - name: Cache Static File
        uses: actions/upload-artifact@v3
        with:
          name: static
          path: static

  build-linux-x64:
    runs-on: ubuntu-20.04
    needs: [ compile-cljs ]
    steps:
      - name: Download The Static Asset
        uses: actions/download-artifact@v3
        with:
          name: static
          path: static

      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(cat ./static/VERSION)
          echo "version=$pkgver" >> $GITHUB_OUTPUT

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      # - name: Cache Node Modules
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       **/node_modules
      #     key: ${{ runner.os }}-node-modules

      - name: Build/Release Electron App
        run: yarn install && yarn electron:make
        working-directory: ./static

      - name: Save artifacts
        run: |
          mkdir -p builds
          # NOTE: save VERSION file to builds directory
          cp static/VERSION ./builds/VERSION
          mv static/out/make/*-*.AppImage ./builds/Logseq-linux-x64-${{ steps.ref.outputs.version }}.AppImage
          mv static/out/make/deb/x64/*.deb ./builds/Logseq-linux-x64-${{ steps.ref.outputs.version }}.deb
          mv static/out/make/rpm/x64/*.rpm ./builds/Logseq-linux-x64-${{ steps.ref.outputs.version }}.rpm
          mv static/out/make/zip/linux/x64/*-linux-x64-*.zip ./builds/Logseq-linux-x64-${{ steps.ref.outputs.version }}.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: logseq-linux-x64-builds
          path: builds

  build-linux-arm64:
    runs-on: ubuntu-20.04
    needs: [ compile-cljs ]
    steps:
      - name: Download The Static Asset
        uses: actions/download-artifact@v3
        with:
          name: static
          path: static

      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(cat ./static/VERSION)
          echo "version=$pkgver" >> $GITHUB_OUTPUT

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Fetch deps
        env:
          npm_config_arch: arm64
        run: |
          yarn install --target_arch=arm64 --target_platform=linux
          rsapi_version=`node -e 'console.log(require("@logseq/rsapi/package.json").optionalDependencies["@logseq/rsapi-linux-arm64-gnu"])'`
          temp_dir=`mktemp -d`
          cd "$temp_dir"
          echo '{"dependencies": {"@logseq/rsapi-linux-arm64-gnu": "'"$rsapi_version"'"}}' > package.json
          yarn install --ignore-platform
          cd -
          mv "$temp_dir/node_modules/@logseq/rsapi-linux-arm64-gnu" node_modules/@logseq/rsapi-linux-arm64-gnu
          rm -rf "$temp_dir" "node_modules/@logseq/rsapi-linux-x64-gnu"
        working-directory: ./static

      - name: Build/Release Electron App
        run: yarn electron:make-linux-arm64
        working-directory: ./static

      - name: Save artifacts
        run: |
          mkdir -p builds
          # NOTE: save VERSION file to builds directory
          cp static/VERSION ./builds/VERSION
          # mv static/out/make/*-*.AppImage ./builds/Logseq-linux-arm64-${{ steps.ref.outputs.version }}.AppImage
          mv static/out/make/zip/linux/arm64/*-linux-arm64-*.zip ./builds/Logseq-linux-arm64-${{ steps.ref.outputs.version }}.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: logseq-linux-arm64-builds
          path: builds

  nightly-release:
    if: ${{ github.event.inputs.build-target == 'nightly' }}
    needs: [ build-linux-x64, build-linux-arm64 ]
    runs-on: ubuntu-20.04
    steps:
      - name: Download The Linux x64 Artifacts
        uses: actions/download-artifact@v3
        with:
          name: logseq-linux-x64-builds
          path: ./

      - name: Download The Linux arm64 Artifacts
        uses: actions/download-artifact@v3
        with:
          name: logseq-linux-arm64-builds
          path: ./

      - name: Generate SHA256 checksums
        run: |
          sha256sum *-linux-* >> SHA256SUMS.txt
          cat SHA256SUMS.txt

      - name: List files
        run: ls -rl

      - name: Update Nightly Release
        uses: andelf/nightly-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly
          name: 'Desktop/Android APP Nightly Release $$'
          draft: false
          prerelease: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.is-pre-release) }}
          body: |
            This is a nightly release of the Logseq desktop app.
            It's unstable compared to the official releases, **use it with caution**!
          files: |
            ./SHA256SUMS.txt
            ./*.zip
            ./*.AppImage
            ./*.deb
            ./*.rpm

  release:
    # NOTE: For now, we only have beta channel to be released on Github
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.build-target == 'beta' }}
    needs: [ build-linux-x64, build-linux-arm64 ]
    runs-on: ubuntu-20.04
    steps:
      - name: Download The Linux x64 Artifacts
        uses: actions/download-artifact@v3
        with:
          name: logseq-linux-x64-builds
          path: ./

      - name: Download The Linux arm64 Artifacts
        uses: actions/download-artifact@v3
        with:
          name: logseq-linux-arm64-builds
          path: ./

      - name: List files
        run: ls -rl

      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(cat VERSION)
          echo "version=$pkgver" >> $GITHUB_OUTPUT


      - name: Generate SHA256 checksums
        run: |
          sha256sum *-linux-* >> SHA256SUMS.txt
          cat SHA256SUMS.txt

      - name: Create Release Draft
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.ref.outputs.version }}
          name: Desktop/Android APP ${{ steps.ref.outputs.version }} (Beta Testing)
          body: "TODO: Fill this changelog. Sorry for the inconvenience!"
          draft: ${{ github.event.inputs.is-draft }}
          prerelease: ${{ github.event.inputs.is-pre-release }}
          files: |
            ./VERSION
            ./SHA256SUMS.txt
            ./*.zip
            ./*.AppImage
            ./*.deb
            ./*.rpm
